import curses
import sbr
import device_control

def main(stdscr):
    curses.echo()
    curses.curs_set(0)  # Hide the cursor

    # Colors and border setup
    curses.start_color()
    curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLUE)
    curses.init_pair(2, curses.COLOR_BLACK, curses.COLOR_CYAN)
    curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_WHITE)
    stdscr.bkgd(curses.color_pair(1))

    # Function to display a box with a title
    def display_box(window, title=""):
        window.attron(curses.color_pair(2))
        window.border(0)
        window.addstr(0, 2, f' {title} ')
        window.attroff(curses.color_pair(2))
        window.refresh()

    # Function to create a scrollable window
    def create_scrollable_window(height, width, start_y, start_x, title):
        win = curses.newwin(height, width, start_y, start_x)
        display_box(win, title)
        pad = curses.newpad(1000, width - 2)  # Large pad to allow scrolling
        return win, pad

    # Function to refresh pads
    def refresh_pad(pad, win, max_lines=1000):
        pad.refresh(0, 0, win.getbegyx()[0] + 1, win.getbegyx()[1] + 1, win.getmaxyx()[0] - 1, win.getmaxyx()[1] - 1)

    # Display available slot numbers
    slot_numbers = sbr.get_slot_numbers()
    height = max(len(slot_numbers) + 4, 10)
    slot_window = curses.newwin(height, 40, 1, 1)
    display_box(slot_window, "Available Slot Numbers")
    for i, slot in enumerate(slot_numbers):
        slot_window.addstr(i + 2, 2, slot)
    slot_window.refresh()

    # Collect user inputs
    input_window = curses.newwin(15, 60, height + 2, 1)
    display_box(input_window, "User Inputs")

    input_window.addstr(2, 2, "Enter your password (sudo access): ")
    user_password = input_window.getstr().decode()

    input_window.addstr(4, 2, "Number of Loops: ")
    inputnum_loops = int(input_window.getstr().decode())

    input_window.addstr(6, 2, "Do you want to kill on error? (y/n): ")
    kill = input_window.getstr().decode()

    input_window.addstr(8, 2, "Choose slot numbers to test (comma separated): ")
    slot_input = input_window.getstr().decode()
    slotlist = list(map(int, slot_input.split(',')))

    input_window.clear()
    display_box(input_window, "Test Parameters")
    input_window.addstr(2, 2, f"Password: {'*' * len(user_password)}")
    input_window.addstr(4, 2, f"Number of Loops: {inputnum_loops}")
    input_window.addstr(6, 2, f"Kill on error: {kill}")
    input_window.addstr(8, 2, f"Slot numbers to test: {slotlist}")
    input_window.addstr(12, 2, "Press any key to start the test...")
    input_window.refresh()
    input_window.getch()

    # Create scrollable windows for device control and SBR test status
    device_win, device_pad = create_scrollable_window(10, 60, height + 17, 1, "Device Control Status")
    sbr_win, sbr_pad = create_scrollable_window(10, 60, height + 28, 1, "SBR Test Status")

    # Function to log messages in a pad
    def log_message(pad, message):
        pad.addstr(pad.getyx()[0], 0, message + "\n")
        refresh_pad(pad, device_win if "Device" in message else sbr_win)

    # Set error reporting to 0
    log_message(device_pad, "Setting error reporting to 0...")
    bdfs = device_control.get_all_bdfs()
    device_control.store_original_values(bdfs)
    device_control.process_bdfs(bdfs)
    log_message(device_pad, "Error reporting set to 0.")

    # Run the sbr functionality
    log_message(sbr_pad, "Running SBR tests...")
    sbr.run_test(stdscr, user_password, inputnum_loops, kill, slotlist)
    log_message(sbr_pad, "SBR tests completed.")

    # Reset device control registers to original values
    log_message(device_pad, "Resetting device control registers...")
    device_control.reset_to_original_values()
    log_message(device_pad, "Device control registers reset to original values.")

    # Display completion message
    stdscr.clear()
    display_box(stdscr, "Test Completed")
    stdscr.addstr(2, 2, "Test completed. Check the output.txt file for results.")
    stdscr.refresh()
    stdscr.getch()  # Wait for a key press to keep the interface open

curses.wrapper(main)
